{"ast":null,"code":"var rotateLeft = function (matrix) {\n  var rows = matrix.length;\n  var columns = matrix[0].length;\n  var res = [];\n\n  for (var row = 0; row < rows; ++row) {\n    res.push([]);\n\n    for (var column = 0; column < columns; ++column) {\n      res[row][column] = matrix[column][columns - row - 1];\n    }\n  }\n\n  return res;\n};\n\nclass Tile {\n  constructor(value, row, column) {\n    this.value = value || 0;\n    this.row = row || -1;\n    this.column = column || -1;\n    this.oldRow = -1;\n    this.oldColumn = -1;\n    this.markForDeletion = false;\n    this.mergedInto = null;\n    this.id = this.id++ || 0;\n  }\n\n  moveTo(row, column) {\n    this.oldRow = this.row;\n    this.oldColumn = this.column;\n    this.row = row;\n    this.column = column;\n  }\n\n  isNew() {\n    return this.oldRow === -1 && !this.mergedInto;\n  }\n\n  hasMoved() {\n    return this.fromRow() !== -1 && (this.fromRow() !== this.toRow() || this.fromColumn() !== this.toColumn()) || this.mergedInto;\n  }\n\n  fromRow() {\n    return this.mergedInto ? this.row : this.oldRow;\n  }\n\n  fromColumn() {\n    return this.mergedInto ? this.column : this.oldColumn;\n  }\n\n  toRow() {\n    return this.mergedInto ? this.mergedInto.row : this.row;\n  }\n\n  toColumn() {\n    return this.mergedInto ? this.mergedInto.column : this.column;\n  }\n\n}\n\nclass Board {\n  constructor() {\n    this.tiles = [];\n    this.cells = [];\n    this.score = 0;\n    this.size = 4;\n    this.fourProbability = 0.1;\n    this.deltaX = [-1, 0, 1, 0];\n    this.deltaY = [0, -1, 0, 1];\n\n    for (var i = 0; i < this.size; ++i) {\n      this.cells[i] = [this.addTile(), this.addTile(), this.addTile(), this.addTile()];\n    }\n\n    this.addRandomTile();\n    this.addRandomTile();\n    this.setPositions();\n    this.won = false;\n  }\n\n  addTile(args) {\n    var res = new Tile(args);\n    this.tiles.push(res);\n    return res;\n  }\n\n  moveLeft() {\n    var hasChanged = false;\n\n    for (var row = 0; row < this.size; ++row) {\n      var currentRow = this.cells[row].filter(tile => tile.value !== 0);\n      var resultRow = [];\n\n      for (var target = 0; target < this.size; ++target) {\n        var targetTile = currentRow.length ? currentRow.shift() : this.addTile();\n\n        if (currentRow.length > 0 && currentRow[0].value === targetTile.value) {\n          var tile1 = targetTile;\n          targetTile = this.addTile(targetTile.value);\n          tile1.mergedInto = targetTile;\n          var tile2 = currentRow.shift();\n          tile2.mergedInto = targetTile;\n          targetTile.value += tile2.value;\n          this.score += tile1.value + tile2.value;\n        }\n\n        resultRow[target] = targetTile;\n        this.won |= targetTile.value === 2048;\n        hasChanged |= targetTile.value !== this.cells[row][target].value;\n      }\n\n      this.cells[row] = resultRow;\n    }\n\n    return hasChanged;\n  }\n\n  setPositions() {\n    this.cells.forEach((row, rowIndex) => {\n      row.forEach((tile, columnIndex) => {\n        tile.oldRow = tile.row;\n        tile.oldColumn = tile.column;\n        tile.row = rowIndex;\n        tile.column = columnIndex;\n        tile.markForDeletion = false;\n      });\n    });\n  }\n\n  addRandomTile() {\n    var emptyCells = [];\n\n    for (var r = 0; r < this.size; ++r) {\n      for (var c = 0; c < this.size; ++c) {\n        if (this.cells[r][c].value === 0) {\n          emptyCells.push({\n            r: r,\n            c: c\n          });\n        }\n      }\n    }\n\n    var index = ~~(Math.random() * emptyCells.length);\n    var cell = emptyCells[index];\n    var newValue = Math.random() < this.fourProbability ? 4 : 2;\n    this.cells[cell.r][cell.c] = this.addTile(newValue);\n  }\n\n  move(direction) {\n    // 0 -> left, 1 -> up, 2 -> right, 3 -> down\n    this.clearOldTiles();\n\n    for (var i = 0; i < direction; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n\n    var hasChanged = this.moveLeft();\n\n    for (let i = direction; i < 4; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n\n    if (hasChanged) {\n      this.addRandomTile();\n    }\n\n    this.setPositions();\n    return this;\n  }\n\n  clearOldTiles() {\n    this.tiles = this.tiles.filter(tile => tile.markForDeletion === false);\n    this.tiles.forEach(tile => {\n      tile.markForDeletion = true;\n    });\n  }\n\n  hasWon() {\n    return this.won;\n  }\n\n  hasLost() {\n    var canMove = false;\n\n    for (var row = 0; row < this.size; ++row) {\n      for (var column = 0; column < this.size; ++column) {\n        canMove |= this.cells[row][column].value === 0;\n\n        for (var dir = 0; dir < 4; ++dir) {\n          var newRow = row + this.deltaX[dir];\n          var newColumn = column + this.deltaY[dir];\n\n          if (newRow < 0 || newRow >= this.size || newColumn < 0 || newColumn >= this.size) {\n            continue;\n          }\n\n          canMove |= this.cells[row][column].value === this.cells[newRow][newColumn].value;\n        }\n      }\n    }\n\n    return !canMove;\n  }\n\n}\n\nexport { Board };","map":{"version":3,"sources":["C:/Proj/2048/src/helper/index.js"],"names":["rotateLeft","matrix","rows","length","columns","res","row","push","column","Tile","constructor","value","oldRow","oldColumn","markForDeletion","mergedInto","id","moveTo","isNew","hasMoved","fromRow","toRow","fromColumn","toColumn","Board","tiles","cells","score","size","fourProbability","deltaX","deltaY","i","addTile","addRandomTile","setPositions","won","args","moveLeft","hasChanged","currentRow","filter","tile","resultRow","target","targetTile","shift","tile1","tile2","forEach","rowIndex","columnIndex","emptyCells","r","c","index","Math","random","cell","newValue","move","direction","clearOldTiles","hasWon","hasLost","canMove","dir","newRow","newColumn"],"mappings":"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","sourcesContent":["var rotateLeft = function (matrix) {\n  var rows = matrix.length;\n  var columns = matrix[0].length;\n  var res = [];\n  for (var row = 0; row < rows; ++row) {\n    res.push([]);\n    for (var column = 0; column < columns; ++column) {\n      res[row][column] = matrix[column][columns - row - 1];\n    }\n  }\n  return res;\n};\n\nclass Tile {\n  constructor(value, row, column) {\n    this.value = value || 0;\n    this.row = row || -1;\n    this.column = column || -1;\n    this.oldRow = -1;\n    this.oldColumn = -1;\n    this.markForDeletion = false;\n    this.mergedInto = null;\n    this.id = this.id++ || 0;\n  }\n  moveTo(row, column) {\n    this.oldRow = this.row;\n    this.oldColumn = this.column;\n    this.row = row;\n    this.column = column;\n  }\n  isNew() {\n    return this.oldRow === -1 && !this.mergedInto;\n  }\n  hasMoved() {\n    return (\n      (this.fromRow() !== -1 &&\n        (this.fromRow() !== this.toRow() ||\n          this.fromColumn() !== this.toColumn())) ||\n      this.mergedInto\n    );\n  }\n  fromRow() {\n    return this.mergedInto ? this.row : this.oldRow;\n  }\n  fromColumn() {\n    return this.mergedInto ? this.column : this.oldColumn;\n  }\n  toRow() {\n    return this.mergedInto ? this.mergedInto.row : this.row;\n  }\n  toColumn() {\n    return this.mergedInto ? this.mergedInto.column : this.column;\n  }\n}\n\nclass Board {\n  constructor() {\n    this.tiles = [];\n    this.cells = [];\n    this.score = 0;\n    this.size = 4;\n    this.fourProbability = 0.1;\n    this.deltaX = [-1, 0, 1, 0];\n    this.deltaY = [0, -1, 0, 1];\n    for (var i = 0; i < this.size; ++i) {\n      this.cells[i] = [\n        this.addTile(),\n        this.addTile(),\n        this.addTile(),\n        this.addTile(),\n      ];\n    }\n    this.addRandomTile();\n    this.addRandomTile();\n    this.setPositions();\n    this.won = false;\n  }\n  addTile(args) {\n    var res = new Tile(args);\n    this.tiles.push(res);\n    return res;\n  }\n\n  moveLeft() {\n    var hasChanged = false;\n    for (var row = 0; row < this.size; ++row) {\n      var currentRow = this.cells[row].filter((tile) => tile.value !== 0);\n      var resultRow = [];\n      for (var target = 0; target < this.size; ++target) {\n        var targetTile = currentRow.length\n          ? currentRow.shift()\n          : this.addTile();\n        if (currentRow.length > 0 && currentRow[0].value === targetTile.value) {\n          var tile1 = targetTile;\n          targetTile = this.addTile(targetTile.value);\n          tile1.mergedInto = targetTile;\n          var tile2 = currentRow.shift();\n          tile2.mergedInto = targetTile;\n          targetTile.value += tile2.value;\n          this.score += tile1.value + tile2.value;\n        }\n        resultRow[target] = targetTile;\n        this.won |= targetTile.value === 2048;\n        hasChanged |= targetTile.value !== this.cells[row][target].value;\n      }\n      this.cells[row] = resultRow;\n    }\n    return hasChanged;\n  }\n  setPositions() {\n    this.cells.forEach((row, rowIndex) => {\n      row.forEach((tile, columnIndex) => {\n        tile.oldRow = tile.row;\n        tile.oldColumn = tile.column;\n        tile.row = rowIndex;\n        tile.column = columnIndex;\n        tile.markForDeletion = false;\n      });\n    });\n  }\n  addRandomTile() {\n    var emptyCells = [];\n    for (var r = 0; r < this.size; ++r) {\n      for (var c = 0; c < this.size; ++c) {\n        if (this.cells[r][c].value === 0) {\n          emptyCells.push({ r: r, c: c });\n        }\n      }\n    }\n    var index = ~~(Math.random() * emptyCells.length);\n    var cell = emptyCells[index];\n    var newValue = Math.random() < this.fourProbability ? 4 : 2;\n    this.cells[cell.r][cell.c] = this.addTile(newValue);\n  }\n  move(direction) {\n    // 0 -> left, 1 -> up, 2 -> right, 3 -> down\n    this.clearOldTiles();\n    for (var i = 0; i < direction; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    var hasChanged = this.moveLeft();\n    for (let i = direction; i < 4; ++i) {\n      this.cells = rotateLeft(this.cells);\n    }\n    if (hasChanged) {\n      this.addRandomTile();\n    }\n    this.setPositions();\n    return this;\n  }\n  clearOldTiles() {\n    this.tiles = this.tiles.filter((tile) => tile.markForDeletion === false);\n    this.tiles.forEach((tile) => {\n      tile.markForDeletion = true;\n    });\n  }\n  hasWon() {\n    return this.won;\n  }\n  hasLost() {\n    var canMove = false;\n    for (var row = 0; row < this.size; ++row) {\n      for (var column = 0; column < this.size; ++column) {\n        canMove |= this.cells[row][column].value === 0;\n        for (var dir = 0; dir < 4; ++dir) {\n          var newRow = row + this.deltaX[dir];\n          var newColumn = column + this.deltaY[dir];\n          if (\n            newRow < 0 ||\n            newRow >= this.size ||\n            newColumn < 0 ||\n            newColumn >= this.size\n          ) {\n            continue;\n          }\n          canMove |=\n            this.cells[row][column].value ===\n            this.cells[newRow][newColumn].value;\n        }\n      }\n    }\n    return !canMove;\n  }\n}\n\nexport { Board };\n"]},"metadata":{},"sourceType":"module"}