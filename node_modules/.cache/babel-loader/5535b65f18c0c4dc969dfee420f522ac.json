{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proj\\\\2048\\\\src\\\\components\\\\Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Board } from \"../helper\";\nimport Cell from './Cell';\nimport Tile from './Tile';\nimport useEvent from './../hooks/useEvent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BoardView = () => {\n  _s();\n\n  const [board, setBoard] = useState(new Board());\n\n  const handleKeyDown = event => {\n    if (board.hasWon()) {\n      return;\n    }\n\n    if (event.keyCode >= 37 && event.keyCode <= 40) {\n      let direction = event.keyCode - 37;\n      let boardClone = Object.assign(Object.create(Object.getPrototypeOf(board)), board);\n      let newBoard = boardClone.move(direction);\n      setBoard(newBoard);\n    }\n  };\n\n  useEvent(\"keydown\", handleKeyDown);\n  const cells = board.cells.map((row, rowIndex) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: row.map((col, colIndex) => {\n        return /*#__PURE__*/_jsxDEV(Cell, {}, rowIndex * board.size + colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 28\n        }, this);\n      })\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  });\n  const tiles = board.tiles.filter(tile => tile.value !== 0).map((tile, index) => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      tile: tile\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"details-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"resetButton\",\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Score: \", board.score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [cells, tiles]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BoardView, \"A107XT3o2FahMcg/61oYRWSixok=\", false, function () {\n  return [useEvent];\n});\n\n_c = BoardView;\nexport default BoardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoardView\");","map":{"version":3,"sources":["C:/Proj/2048/src/components/Board.jsx"],"names":["React","useState","useEffect","Board","Cell","Tile","useEvent","BoardView","board","setBoard","handleKeyDown","event","hasWon","keyCode","direction","boardClone","Object","assign","create","getPrototypeOf","newBoard","move","cells","map","row","rowIndex","col","colIndex","size","tiles","filter","tile","value","index","score"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,KAAT,QAAsB,WAAtB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAIE,KAAJ,EAAD,CAAlC;;AAEA,QAAMO,aAAa,GAAIC,KAAD,IAAW;AAC7B,QAAIH,KAAK,CAACI,MAAN,EAAJ,EAAoB;AAChB;AACH;;AAED,QAAID,KAAK,CAACE,OAAN,IAAiB,EAAjB,IAAuBF,KAAK,CAACE,OAAN,IAAiB,EAA5C,EAAgD;AAC5C,UAAIC,SAAS,GAAGH,KAAK,CAACE,OAAN,GAAgB,EAAhC;AACA,UAAIE,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcF,MAAM,CAACG,cAAP,CAAsBX,KAAtB,CAAd,CAAd,EAA2DA,KAA3D,CAAjB;AACA,UAAIY,QAAQ,GAAGL,UAAU,CAACM,IAAX,CAAgBP,SAAhB,CAAf;AACAL,MAAAA,QAAQ,CAACW,QAAD,CAAR;AAEH;AACJ,GAZD;;AAcAd,EAAAA,QAAQ,CAAC,SAAD,EAAYI,aAAZ,CAAR;AAEA,QAAMY,KAAK,GAAGd,KAAK,CAACc,KAAN,CAAYC,GAAZ,CAAgB,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAC7C,wBACI;AAAA,gBACKD,GAAG,CAACD,GAAJ,CAAQ,CAACG,GAAD,EAAMC,QAAN,KAAmB;AACxB,4BAAO,QAAC,IAAD,MAAWF,QAAQ,GAAGjB,KAAK,CAACoB,IAAjB,GAAwBD,QAAnC;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFA;AADL,OAAUF,QAAV;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GARa,CAAd;AAUA,QAAMI,KAAK,GAAGrB,KAAK,CAACqB,KAAN,CAAYC,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,KAAL,KAAe,CAA1C,EAA6CT,GAA7C,CAAiD,CAACQ,IAAD,EAAOE,KAAP,KAAiB;AAC5E,wBAAO,QAAC,IAAD;AAAkB,MAAA,IAAI,EAAEF;AAAxB,OAAWE,KAAX;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFa,CAAd;AAIA,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,8BAAazB,KAAK,CAAC0B,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,iBACKZ,KADL,EACYO,KADZ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CA5CD;;GAAMtB,S;UAiBFD,Q;;;KAjBEC,S;AA8CN,eAAeA,SAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport { Board } from \"../helper\";\r\nimport Cell from './Cell';\r\nimport Tile from './Tile';\r\nimport useEvent from './../hooks/useEvent';\r\n\r\nconst BoardView = () => {\r\n    const [board, setBoard] = useState(new Board());\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (board.hasWon()) {\r\n            return;\r\n        }\r\n\r\n        if (event.keyCode >= 37 && event.keyCode <= 40) {\r\n            let direction = event.keyCode - 37;\r\n            let boardClone = Object.assign(Object.create(Object.getPrototypeOf(board)), board);\r\n            let newBoard = boardClone.move(direction);\r\n            setBoard(newBoard);\r\n\r\n        }\r\n    };\r\n\r\n    useEvent(\"keydown\", handleKeyDown);\r\n\r\n    const cells = board.cells.map((row, rowIndex) => {\r\n        return (\r\n            <div key={rowIndex}>\r\n                {row.map((col, colIndex) => {\r\n                    return <Cell key={rowIndex * board.size + colIndex} />\r\n                })}\r\n            </div>\r\n        )\r\n    });\r\n\r\n    const tiles = board.tiles.filter(tile => tile.value !== 0).map((tile, index) => {\r\n        return <Tile key={index} tile={tile} />\r\n    }) ;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"details-box\">\r\n                <div className=\"resetButton\">New Game</div>\r\n                <div>Score: {board.score}</div>\r\n            </div>\r\n            <div className=\"board\">\r\n                {cells}{tiles}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoardView\r\n"]},"metadata":{},"sourceType":"module"}